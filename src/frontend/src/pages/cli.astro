---
import Layout from '../layouts/Layout.astro'
import Section from '../components/Section.astro'
import ZoomImage from '../components/zoomImage/zoomImage.astro'
import YoungG from '../sections/imgs/cli.png'
---

<Layout title='AstroX Cli'>
  <div class='container'>
    <ZoomImage
      src={YoungG}
      alt='Astro X Cli reference guide'
      borderFlat='right'
    />
    <div class='cliInfo'>
      <h2>AstroX Cli</h2>
      <h3>ü¶Ä Project Runner written in rust for automatic boring tasks</h3>
      <p>
        AstroX is a command-line interface (CLI) tool designed to streamline the
        development process of AstroX projects. It provides a range of features
        and functionalities to enhance productivity, automate repetitive tasks,
        and enforce best practices for code quality.
      </p>
      <ul class='live type2'>
        <li>
          cargo run -- --interactive mode with oprions and promts, that lists
          all the possible execution options
        </li>
        <li>
          cargo run for quick and easy installation process that takes care of
          system checks and prerequisites.
        </li>
        <li>
          cargo run -- --test to run all the tests in the project with a single
          cmd
        </li>
        <li>
          cargo run -- --build to build the project for production with a single
          cmd
        </li>
        <li>file and arg configartion</li>
        <li>
          actix rust server autorestart on production panic, code covearge for
          rust and frontend, and many many more
        </li>
      </ul>
    </div>
  </div>
  <Section>
    <h2>CLI Arguments</h2>
    <p>
      The AstroX CLI supports various command-line arguments to customize its
      behavior and configuration:
    </p>
    <code>
      Command list:<br />
      --help [print this help]<br />
      --sync-git-hooks [copy git_hooks folder contents to .git/hooks]<br />
      --remove-git-hooks [remove hooks from .git/hooks folder]<br />
      --build [build production bundle for frontend and backend]<br />
      --serve [start the production server with the frontend build]<br />
      --test [run the tests]<br />
      --create-toml [create a new Astrox.toml file]<br />
      --interactive [start the interactive mode]<br />
      --system-checks [run the system checks] <br />
      <br />
    </code>
  </Section>
  <Section>
    <h2>Cli run backend and frontend arguments</h2>
    <table class='arguments-table'>
      <thead>
        <tr>
          <th>Argument</th>
          <th>Value</th>
          <th>Type</th>
          <th>Description</th>
          <th>Example</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>--host</td>
          <td>localhost or ip address </td>
          <td>String</td>
          <td>Set the host for the project</td>
          <td>--host=0.0.0.0</td>
        </tr>
        <tr>
          <td>--port</td>
          <td>5412</td>
          <td>Number</td>
          <td>Set the port for the project</td>
          <td>--port=5412</td>
        </tr>
        <tr>
          <td>--env</td>
          <td>prod/dev</td>
          <td>String</td>
          <td>Set the environment for the project</td>
          <td>--env=prod/dev</td>
        </tr>
        <tr>
          <td>--astro-port</td>
          <td>2343</td>
          <td>Number</td>
          <td>Set the port for the Astro server</td>
          <td>--astro-port=2343</td>
        </tr>
        <tr>
          <td>--prod-astro-build</td>
          <td>true/false</td>
          <td>Boolean</td>
          <td
            >Build just the rust backend, switch the astro.build for --env=prod
            --build
          </td>
          <td>--prod-astro-build=true/false</td>
        </tr>
      </tbody>
    </table>
  </Section>

  <Section>
    <h2>üëä Git Hooks</h2>
    <p>
      The AstroX CLI includes pre-defined Git hooks that promote code quality
      and enhance development workflows. These hooks provide:
    </p>
    <ul>
      <li>
        Commit message validation with
        <a
          target='_blank'
          href='https://github.com/KeisukeYamashita/commitlint-rs'
          >commitlint-rs</a
        >
      </li>
      <li>
        Pre-commit hook to test and lint staged files directly from git with 0
        dependecies
      </li>
      <li>Pre-push hook to run all tests</li>
    </ul>
  </Section>
  <Section>
    <h2>üìÅ Astrox.toml file</h2>
    <p>
      With Astrox.toml file you can configure both frontend and backend variable
      in one place.
    </p>
    <code>
      host = "localhost" <br />
      port = 8080 <br />
      env = "dev" astro_port = 5431<br />
      prod_astro_build = true <br />
      [public_keys] <br />
      public_api_url ="https://localhost:8000/api"</code
    >
    <p>
      [public keys] will be copied over to frontend env file, before the build,
      for easy localhost / prod switchero
    </p>
  </Section>
</Layout>

<style>
  h2 {
    color: #777;
  }
  p {
    margin-top: 15px;
    line-height: 1.5;
    font-size: large;
  }

  code {
    display: block;
    background: #24262e;
    white-space: pre;
    color: white;
    -webkit-overflow-scrolling: touch;
    overflow-x: scroll;
    max-width: 100%;
    min-width: 100px;
    padding: 20px;
    border-radius: 5px;
  }

  h2 {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    color: #100f0f;
  }
  .codeHolder {
    display: flex;
    justify-content: start;
    align-items: center;
    padding: 10px;
    background-color: #f1f1f1;
  }

  .container {
    display: grid;
    grid-template-columns: 1fr;
    margin: 0 auto;
    position: relative;
    gap: 40px;

    .cliInfo {
      width: 100%;
      padding: 10px;
      display: flex;
      flex-direction: column;
    }

    p {
      font-size: 1.2rem;
      line-height: 1.5;
      padding-right: 20px;
      color: #100f0f;
    }

    @media screen and (min-width: 768px) {
      grid-template-columns: 1fr 1.5fr;
    }
  }

  .live {
    overflow: hidden;

    > li {
      list-style: none;
      position: relative;
      padding: 0 0 0 2em;
      margin: 0.5em 0;
      transition: 0.12s;
      font-size: 1.2em;

      &::before {
        position: absolute;
        content: '\2022';
        font-family: Arial;
        color: #b8abab;
        top: 0;
        left: 0;
        text-align: center;
        font-size: 2em;
        opacity: 0.5;
        line-height: 0.75;
        transition: 0.5s;
      }

      &:hover {
        color: #b12424;
        &::before {
          transform: scale(2);
          opacity: 1;
          text-shadow: 0 0 4px;
          transition: 0.1s;
        }
      }
    }

    &.type2 {
      > li {
        &::before {
          content: '';
          width: 10px;
          height: 10px;
          background: #473e3e;
          border-radius: 3px;
          line-height: 0;
          top: 0.27em;
          left: 5px;
        }

        &:hover::before {
          transform: none;
          border-radius: 5px;
          width: 25px;
          left: -10px;
          background: #ba5353;
        }
      }
    }
  }

  /* Numbers */

  .live.numbers {
    counter-reset: numbers 0;
    > li {
      &::before {
        content: counter(numbers, decimal) '.';
        counter-increment: numbers 1;
        font-size: 1em;
        opacity: 0.5;
        line-height: 1.2;
        transition: 0.5s;
      }
      &:hover:before {
        opacity: 1;
        left: -10px;
        transform: none;
        text-shadow: none;
        transition: 0.12s;
      }
    }
  }

  ol,
  ul {
    color: rgba(rgb(58, 49, 49), 0.5);
    border-radius: 5px;

    @media screen and (min-width: 768px) {
      padding-right: 100px;
    }
  }

  table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 100%;
  }
  td,
  th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }
</style>
